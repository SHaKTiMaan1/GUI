# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog,QMessageBox
import bcrypt
import sys
import pymongo
from getpass import getpass
import re

from dash_main import MainWindow

class Ui_Form(object):
    global hashpass
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(743, 528)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("PinClipart.com_silhouette-headshot-clip-art_4167138.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Form.setWindowIcon(icon)
        Form.setStyleSheet("*{\n"
"    font-family:century gothi;\n"
"    font-size:25px;\n"
"}\n"
"QFrame\n"
"{\n"
"    background:#333;\n"
"    border-radius:15px;\n"
"}\n"
"\n"
"#Form\n"
"{\n"
"    background:url(E:\\images.jpeg);\n"
"}\n"
"\n"
"QPushButton\n"
"{\n"
"    background:blue;\n"
"    border-radius:60px;\n"
"}\n"
"\n"
"QToolButton\n"
"{\n"
"    background:blue;\n"
"    border-radius:30px;\n"
"}\n"
"\n"
"QLabel\n"
"{\n"
"    color:white;\n"
"}\n"
" \n"
"QPushButton\n"
"{\n"
"    color:white;\n"
"    border-radius:15px;\n"
"}\n"
"\n"
"QPushButton:hover\n"
"{\n"
"    color:blue;\n"
"    border-radius:15px;\n"
"    background:#333;\n"
"}\n"
"\n"
"QLineEdit\n"
"{\n"
"    background:transparent;\n"
"    border:none;\n"
"    color:#717072;\n"
"    border-bottom:1px sold #717072;\n"
"}\n"
"\n"
"\n"
"")
        self.frame = QtWidgets.QFrame(Form)
        self.frame.setGeometry(QtCore.QRect(170, 40, 441, 451))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(150, 60, 121, 41))
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(140, 390, 181, 41))
        self.pushButton.setObjectName("pushButton")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(30, 120, 121, 41))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setGeometry(QtCore.QRect(30, 250, 121, 41))
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.lineEdit.setGeometry(QtCore.QRect(30, 180, 271, 41))
        self.lineEdit.setBaseSize(QtCore.QSize(0, 0))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_2.setGeometry(QtCore.QRect(30, 310, 271, 41))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.toolButton = QtWidgets.QToolButton(self.frame)
        self.toolButton.setGeometry(QtCore.QRect(180, 0, 61, 61))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("FAVPNG_login-person-user-avatar_HL2bzWyV.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton.setIcon(icon1)
        self.toolButton.setIconSize(QtCore.QSize(77, 80))
        self.toolButton.setCheckable(False)
        self.toolButton.setObjectName("toolButton")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.pushButton.clicked.connect(self.login)


    
    def login(self):
        global hashpass
        uname = self.lineEdit.text()
        pawd = self.lineEdit_2.text() 
        
        """Connection String"""
        client = pymongo.MongoClient(
            "mongodb+srv://CCI:root@cluster0.4gzmr.mongodb.net/CARE?retryWrites=true&w=majority")
        db = client["Jhansi"]
        col = db["cciemployees"]

        """Searching for document with the specified CCI Id"""
        query = {"email": f"{uname}"}
        doc = col.find(query)
        
        for x in doc:
            hashpass = x["password"]
            hashpass = hashpass.encode('utf-8')
            cci_id = x["cci_id"] 
        
        """Validating Password"""

        pawd = pawd.encode('utf-8')
        if(bcrypt.checkpw(pawd, hashpass)):
            print("Login Successful")
            f = open("CCI.txt","w+")
            f.write(cci_id+"\n")
            f.close()
            message = QMessageBox
    
            self.da = QtWidgets.QMainWindow()
            self.window = MainWindow()
            self.window.dailog(self.window)
            self.window.show()


        else:
            message = QMessageBox.critical(self, "Error" ,"Wrong credential!!")

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Login"))
        self.label.setText(_translate("Form", "Login Here"))
        self.pushButton.setText(_translate("Form", "Login"))
        self.label_2.setText(_translate("Form", "Username"))
        self.label_3.setText(_translate("Form", "Password"))
        self.lineEdit.setText(_translate("Form", "Username"))
        self.lineEdit_2.setText(_translate("Form", "Password"))
        self.toolButton.setText(_translate("Form", "..."))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
